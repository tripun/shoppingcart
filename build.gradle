plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.github.spotbugs' version '6.0.8'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('awsSdkVersion', '2.25.61')
    set('springCloudAwsVersion', '3.1.1')
    set('testcontainersVersion', '1.19.8')
    set('springCloudVersion', '2023.0.2')
    set('springdocVersion', '2.5.0')
    // Lombok: pinned for annotation processing at compile time only
    set('lombokVersion', '1.18.38')
}

// Force a single SLF4J API version and avoid accidental bindings from transitive deps
configurations.all {
    resolutionStrategy.force('org.slf4j:slf4j-api:2.0.9')
    // Exclude common conflicting SLF4J bindings across all configurations
    exclude group: 'org.slf4j', module: 'slf4j-simple'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.slf4j', module: 'slf4j-jdk14'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
        mavenBom "software.amazon.awssdk:bom:${awsSdkVersion}"
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Spring Cloud AWS for DynamoDB Auto-configuration
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-dynamodb'

    // AWS SDK & DB Drivers
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'
    // AWS Lambda dependencies for local compilation of handler classes
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'

    // JWT Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Utilities: Lombok only at compile/annotation-processing time
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Ensure SLF4J API is available at compile/runtime and exclude common conflicting bindings
    // Force a single SLF4J API version to avoid mixed 1.x/2.x issues across transitive dependencies
    implementation 'org.slf4j:slf4j-api:2.0.9'

    // Provide an explicit SLF4J binding (Logback) so a provider is available during tests and analysis tools
    // Using runtimeOnly keeps the binding out of compile classpath; Spring Boot manages versioning
    runtimeOnly 'ch.qos.logback:logback-classic'

    // Embedded services for local development & SLF4J conflict resolution
    implementation('it.ozimov:embedded-redis:0.7.3') {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }

    // Metrics and Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Testing Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:localstack:${testcontainersVersion}"
    testImplementation 'org.awaitility:awaitility'
    // Ensure test runtime has a logging provider available for SLF4J-based tools
    testRuntimeOnly 'ch.qos.logback:logback-classic'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    systemProperty 'spring.profiles.active', 'test'
    ignoreFailures = true
}

// JaCoCo Configuration
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

// SonarQube Configuration
sonarqube {
    properties {
        property "sonar.projectName", "Shopping Cart Application"
        property "sonar.projectKey", "shopping-cart"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

// SpotBugs Configuration
spotbugs {
    toolVersion = '4.8.5'
    ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html.required = true
    }
}
