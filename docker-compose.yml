version: '3.8'

networks:
  shopping-cart-network:
    driver: bridge

volumes:
  dynamodb-data:
  kafka-data:
  zookeeper-data:
  redis-data:

services:
  # Shopping Cart Application
  shopping-cart-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: shopping-cart-app
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # Database Configuration
      - SPRING_DATASOURCE_URL=jdbc:h2:mem:shoppingcartdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=

      # Redis Configuration
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD:-}

      # Kafka Configuration
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

      # DynamoDB Configuration
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY=dummy-key
      - AWS_SECRET_KEY=dummy-secret

      # JWT Configuration
      - JWT_SECRET=${JWT_SECRET:-dGhpcyBpcyBhIHNlY3VyZSBqd3Qgc2VjcmV0IGZvciBkZXZlbG9wbWVudA==}

      # Application Configuration
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - APP_DEFAULT_REGION=${APP_DEFAULT_REGION:-UK}
      - APP_DEFAULT_CURRENCY=${APP_DEFAULT_CURRENCY:-GBP}

    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      dynamodb-local:
        condition: service_started
    networks:
      - shopping-cart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache Service
  redis:
    image: redis:7.2-alpine
    container_name: shopping-cart-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    volumes:
      - redis-data:/data
    networks:
      - shopping-cart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: shopping-cart-zookeeper
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - shopping-cart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: shopping-cart-kafka
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "${KAFKA_EXTERNAL_PORT:-9093}:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_EXTERNAL://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance settings
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - shopping-cart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DynamoDB Local for Development
  dynamodb-local:
    image: amazon/dynamodb-local:2.2.1
    container_name: shopping-cart-dynamodb
    ports:
      - "${DYNAMODB_PORT:-8000}:8000"
    command: >
      -jar DynamoDBLocal.jar 
      -sharedDb 
      -dbPath ./data 
      -optimizeDbBeforeStartup
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    networks:
      - shopping-cart-network
    restart: unless-stopped

  # Kafka UI for Development/Monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: shopping-cart-kafka-ui
    ports:
      - "${KAFKA_UI_PORT:-8081}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: shopping-cart-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - shopping-cart-network
    restart: unless-stopped
    profiles:
      - dev
      - debug

  # Redis Commander for Development/Monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: shopping-cart-redis-ui
    ports:
      - "${REDIS_UI_PORT:-8082}:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - shopping-cart-network
    restart: unless-stopped
    profiles:
      - dev
      - debug
